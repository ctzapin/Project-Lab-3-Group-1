//Name: Scan-Room Project
//Class: Project Lab 3
//Professor: William Ray
//Date: 09/24/2018
//Author: Weston L. Salinas
//Input Output Diagram/////////////////////////////////////////////////////
//                  -------
//      (VCC)    --|       |--   (Ground)
//      (P1.0)   --|       |--   (XIN)
//RX Pin(P1.1)  -->|       |--   (XOUT)
//TX Pin(P1.2)  <--|       |--   (TEST)
//EN A  (P1.3)  <--|       |--   (RST)
//EN B  (P1.4)  <--|       |<--  (P1.7) LIDAR ECHO Input
//IN1   (P1.5)  <--|       |-->  (P1.6) Servo Output PWM
//IN2   (P2.0)  <--|       |-->  (P2.5) LIDAR TRIGGER Output
//IN3   (P2.1)  <--|       |--   (P2.4)
//IN4   (P2.2)  <--|       |--   (P2.3)
//                  -------
//Includes/////////////////////////////////////////////////////////////////
#include <msp430g2553.h>                                                   //Include MSP430g2553 header file
#include <stdio.h>                                                         //Include standard IO header file
#include <stdlib.h>                                                        //Include Standard Library header file
//Global Variables/////////////////////////////////////////////////////////
int Boolean_Begin_Scanning = 0;                                            //Flag for Start Scanning Mode
int Boolean_Stop_Scanning = 0;                                             //Flag for Stop Scanning Mode
int Boolean_Begin_Path_Follower = 0;                                       //Flag For Begin path Follower Mode
int Boolean_Stop_Path_Follower = 0;                                        //Flag For Stop Path Follower Mode
int Forward_Distance = 0;                                                  //Forward distance (cm)
int Left_Distance = 0;                                                     //Left distance (cm)
int Right_Distance = 0;                                                    //Right distance (cm)
int Miliseconds = 0;                                                       //milliseconds counter
int Distance1 = 0;                                                         //distance1 value from LIDAR
int Distance2 = 0;                                                         //distance2 value from LIDAR
int Distance3 = 0;                                                         //distance3 value from LIDAR
int Final_Distance = 0;                                                    //Averaged distance value from LIDAR
long Sensor = 0;                                                           //Unaltered amount of microseconds output from the LIDAR
int Angle = 0;                                                             //Angle of the servo in degrees
char number[20];                                                           //Each Character of the Distance value being transmitted
int Went_Low = 0;                                                          //Boolean for when falling edge is detected on echo pin
//Function Declarations/////////////////////////////////////////////////////
void Initial_Setup();
void General_Pin_Setup();
void UART_Pin_Mux();
void UART_Baud_Setup();
void UART_Interrupt_Setup();
void Servo_Pos(int pos);
void Scanning_Mode();
void Path_Follower_Mode();
void Scan_Room();
void Turn_Left();
void Turn_Right();
void Go_Forward();
void Transmit_Number(int num);
//Main Loop////////////////////////////////////////////////////////////////
int main(void)
{
   Initial_Setup();
   General_Pin_Setup();
   UART_Pin_Mux();
   UART_Baud_Setup();
   UART_Interrupt_Setup();

   while(1)                                                                //Waiting for serial input
   {
       if (Boolean_Begin_Scanning)                                         //If Begin Scanning variable is set to 1
       {
           Boolean_Begin_Scanning = 0;                                     //Set Boolean to 0
           Boolean_Stop_Scanning = 0;                                      //Set Boolean to 0
           Scanning_Mode();                                                //scanning mode function
       }
       if (Boolean_Begin_Path_Follower)                                    //If Begin path follower mode is set to 1
       {
           Boolean_Begin_Path_Follower = 0;                                //Set Boolean to 0
           Boolean_Stop_Path_Follower = 0;                                 //Set Boolean to 0
           Path_Follower_Mode();                                           //path follower function
       }

   }
}
//Initial Setup Function//////////////////////////////////////////////////
void Initial_Setup()
{
    //General Timer Setup/////////////////////////////////////////////////
    WDTCTL = WDTPW + WDTHOLD;                                              // Stop watch dog timer
    DCOCTL = 0;                                                            // reset clock to zero
    BCSCTL1 = CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;                                                  // submainclock 1mhz
    P1IFG  = 0x00;                                                         //clear all interrupt flags
    //Servo Timer Setup///////////////////////////////////////////////////
    TA0CCR0 = 20000-1;                                                     // PWM Period TA0.1
    TA0CCR1 = 1500;                                                        // CCR1 PWM duty cycle
    TA0CCTL1 = OUTMOD_7;                                                   // CCR1 reset/set
    TA0CTL   = TASSEL_2 + MC_1;                                            // SMCLK, up mode
    //Milisecond Timer Setup//////////////////////////////////////////////
    TA1CTL = TASSEL_2 + MC_1;                                              // SMCLK, upmode
    TA1CCR0 = 1000;                                                        //Set TA1.0 to 1000 for milisecond counter
    TA1CCTL0 = CCIE;                                                       //TA1.0 interrupt enabled
    return;
}
//Pin Setup FUnction//////////////////////////////////////////////////////
void General_Pin_Setup()
{
    P1DIR &= ~(BIT7);
    P1DIR |= (BIT0 + BIT3 + BIT4 + BIT5 + BIT6);
    P2DIR |= (BIT0 + BIT1 + BIT2 + BIT5);
    P1OUT &= ~(BIT3 + BIT4 + BIT5 + BIT6);
    P2OUT &= ~(BIT0 + BIT1 + BIT2 + BIT5);
    P2OUT |= (BIT5);
    P1SEL |= BIT6;                                                         // P1.6 select TA0.1 option
    return;
}
//UART Pin Multiplexing///////////////////////////////////////////////////
void UART_Pin_Mux()
{
    P1SEL |= (BIT1 + BIT2);                                                //Set P1.1 is RX pin and P1.2 is TX pin
    P1SEL2 |= (BIT1 + BIT2);
    return;
}
//UART Baud Rate Setup////////////////////////////////////////////////////
void UART_Baud_Setup()
{
    UCA0CTL1 = UCSWRST;                                                    //UCA0 set in reset to be configured
    UCA0CTL1 |= UCSSEL_2;                                                  //SMCLK
    UCA0BR0 = 104;                                                         //9600
    UCA0BR1 = 0;                                                           //9600
    UCA0MCTL = UCBRS_1;                                                     //Set baud rate generator for 9600 Modulation
    UCA0CTL1 &= ~(UCSWRST);                                                //take USCI out of reset
    return;
}
//UART Interrupt Setup////////////////////////////////////////////////////
void UART_Interrupt_Setup()
{
    IE2 |= UCA0RXIE;                                                       //Enable RX interrupt
    IE2 |= UCA0TXIE;                                                       // Enable the Transmit interrupt
    _BIS_SR(GIE);                                                          // Enable Global Interrupts
    return;
}
//Servo Position Setup////////////////////////////////////////////////////
void Servo_Pos(int pos){
    // 500 = 45 degrees
    // 11.11 = 1 degree
    TA0CCR1 = (pos+35)*10;
}
//Scanning Mode///////////////////////////////////////////////////////////
void Scanning_Mode()
{
    while(1)
    {
        Scan_Room();

        if (Forward_Distance >= 30)
        {
            Go_Forward();
        }
        else if ((Left_Distance < 30) && (Forward_Distance < 30) && (Right_Distance >= 30) )
        {
            Turn_Right();
        }
        else if ((Left_Distance >= 30) && (Forward_Distance < 30) && (Right_Distance < 30) )
        {
            Turn_Left();
        }
        else if ((Left_Distance < 30) && (Forward_Distance < 30) && (Right_Distance < 30) )
        {
            Turn_Right();
            Turn_Right();
        }
        else if ((Left_Distance >= 30) && (Forward_Distance < 30) && (Right_Distance >= 30) )
        {
            Turn_Right();
        }
        if (Boolean_Stop_Scanning == 1)
        {
            Boolean_Stop_Scanning = 0;
            return;
        }
    }
}
//Path Follower Mode//////////////////////////////////////////////////////
void Path_Follower_Mode()
{
    return;
}
//Scan Room Function//////////////////////////////////////////////////////
void Scan_Room()
{
    for(Angle = 0; Angle < 181 ; Angle = Angle + 10)
    {

        Servo_Pos(Angle);
        Final_Distance = 0;                                                //Averaged distance = 0
        Distance1 = 0;                                                     //Distance 1 = 0
        Distance2 = 0;                                                     //Distance 2 = 0
        Distance3 = 0;                                                     //Distance 3 = 0
        P1IE &= ~0x01;                                                     // disable interrupt
        P2OUT &= ~(BIT5);                                                  // generate PWM  (P2.5 gets this value)
        __delay_cycles(1000);                                              // for 10us
        P1DIR &= ~(BIT7);                                                  // make pin P1.7 input (ECHO)
    //While Loop Measuring distances inside acceptable tolerance////////////
        while (Final_Distance >= (Distance1 + 2) || Final_Distance == 0 || Final_Distance <= (Distance1 - 2)) // the average has to be within +/- 2 cm of the first distance to be accepted
        {
            Final_Distance = 0;                                            //Averaged distance = 0
            Distance1 = 0;                                                 //Distance 1 = 0
            Distance2 = 0;                                                 //Distance 2 = 0
            Distance3 = 0;                                                 //Distance 3 = 0
    //Distance 1 Measurement///////////////////////////////////////////////
            P1IFG = 0x00;                                                  // clear flag just in case anything happened before
            P1IE |= (BIT7);                                                // enable interupt on ECHO pin
            P1IES &= ~(BIT7);                                              // rising edge on ECHO pin
            Went_Low = 0;                                                  // went low = 0
            while (Went_Low == 0)                                          //while the falling edge hasnt been found
            {
                if (Went_Low == 1)                                         //if falling edge is found
                {
                    break;                                                 //break
                }
            }
            Distance1 = ((.08979618104 * Sensor) - 6.94633);               // converting echo length to distance in cm's

    //Distance 2 Measurement///////////////////////////////////////////////
            P1IFG = 0x00;                                                  // clear flag just in case anything happened before
            P1IE |= (BIT7);                                                // enable interupt on ECHO pin
            P1IES &= ~(BIT7);                                              // rising edge on ECHO pin
            Went_Low = 0;                                                  // went low = 0
            while (Went_Low == 0)                                          //while the falling edge hasnt been found
            {
                if (Went_Low == 1)                                         //if falling edge is found
                {
                    break;                                                 //break
                }
            }
            Distance2 = ((.08979618104 * Sensor) - 6.94633);               // converting echo length to distance in cm's
    //Distance 3 Measurement///////////////////////////////////////////////
            P1IFG = 0x00;                                                  // clear flag just in case anything happened before
            P1IE |= (BIT7);                                                // enable interupt on ECHO pin
            P1IES &= ~(BIT7);                                              // rising edge on ECHO pin
            Went_Low = 0;                                                  // went low = 0
            while (Went_Low == 0)                                          //while the falling edge hasnt been found
            {
                if (Went_Low == 1)                                         //if falling edge is found
                {
                    break;                                                 //break
                }
            }
            Distance3 = ((.08979618104 * Sensor) - 6.94633);               // converting echo length to distance in cm's
     //Finding Average Distance////////////////////////////////////////////
            Final_Distance = (Distance1 + Distance2 + Distance3 )/3;       //find the average of the three measured distances
        }
        P2OUT |= (BIT5);                                                   //make pin 2.5 high to stop measurements
        P1IE &= ~0x01;                                                     //Disable interrupt

        if (Angle == 0)                                                    //if the angle is 0 (right)
        {
            Right_Distance = Final_Distance;                               //set right_distance to the averaged distance
        }
        if (Angle == 90)                                                   //if angle is 90 degrees (forward)
        {
            Forward_Distance = Final_Distance;                             //set forward_distance to averaged distance
        }
        if (Angle == 180)                                                  //if angle is 180 degrees (left)
        {
            Left_Distance = Final_Distance;                                //set left_distance to averaged distance
        }


        UCA0TXBUF = 'C';                                                   //transmit the C character indicating incoming angle
        __delay_cycles(10000);
        Transmit_Number(180-Angle);                                        //transmit angle with transmit number function
        __delay_cycles(10000);
        UCA0TXBUF = 'D';                                                   //transmit D character indicating incoming distance
        __delay_cycles(10000);
        Transmit_Number(Final_Distance);                                   //transmit averaged distance using transmit number functio
        __delay_cycles(1000000);                                           //delay
    }
}
//Turn Rover 90 degrees right//////////////////////////////////////////////
void Turn_Left()
{
    // turn left
    P1OUT |= (BIT3 + BIT4 + BIT5);
    P2OUT |= (BIT2);
    __delay_cycles(60000);
    P1OUT &= ~(BIT3 + BIT4 + BIT5);
    P2OUT &= ~(BIT2);
    UCA0TXBUF = 'L';
    return;
}
//turn rover 90 degrees right///////////////////////////////////////////////
void Turn_Right()
{
    // turn right
    P1OUT |= (BIT3 + BIT4);
    P2OUT |= (BIT0 + BIT1);
    __delay_cycles(60000);
    P1OUT &= ~(BIT3 + BIT4 + BIT5);
    P2OUT &= ~(BIT2);
    UCA0TXBUF = 'R';
    return;
}
//Move Rover Forward one unit///////////////////////////////////////////////
void Go_Forward()
{
    // go forward
    P1OUT |= (BIT3 + BIT4 );
    P2OUT |= (BIT0 + BIT1);
    __delay_cycles(60000);
    P1OUT &= ~(BIT3 + BIT4 + BIT5 );
    P2OUT &= ~(BIT1);
    UCA0TXBUF = 'F';
    return;
}
//Transmit Integer digit by digit as characters/////////////////////////////
void Transmit_Number(int num)
{
    number[0]='0';
    number[1]='\0';
    number[2]='\0';
    number[3]='\0';
    number[4]='\0';
    number[5]='\0';
    number[6]='\0';
    number[7]='\0';
    number[8]='\0';
    number[9]='\0';
    number[10]='\0';
    int increment = 0;
    while (num > 0)
    {
     int digit = num % 10;

     if (digit == 0)
     number[increment] = '0';
     else if (digit == 1)
     number[increment] = '1';
     else if (digit == 2)
     number[increment] = '2';
     else if (digit == 3)
     number[increment] = '3';
     else if (digit == 4)
     number[increment] = '4';
     else if (digit == 5)
     number[increment] = '5';
     else if (digit == 6)
     number[increment] = '6';
     else if (digit == 7)
     number[increment] = '7';
     else if (digit == 8)
     number[increment] = '8';
     else if (digit == 9)
     number[increment] = '9';
     num /= 10;
     increment = increment+1;
    }
    for (increment+1;increment>(-1);increment-=1)
    {
        UCA0TXBUF = number[increment];
        __delay_cycles(1000);
    }
}
//Echo Pin Port Interrupt//////////////////////////////////////////////
#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{
    if(P1IFG & BIT7)                                                 //is there interrupt pending?
        {
          if(!(P1IES & BIT7))                                            // is this the rising edge?
          {
            TACTL|=TACLR;                                              // clears timer A
            Miliseconds = 0;
            P1IES |= BIT7;                                             //falling edge
            P1OUT |= (BIT0);
          }
          else
          {
           Sensor = (long)TAR + (long)Miliseconds*1000 ;               //calculating ECHO lenght
           P1OUT &= ~(BIT0);
           Went_Low = 1;
          }
    P1IFG &= ~BIT7;                                    //clear flag
    }
}

//TX Interrupt///////////////////////////////////////////////////////
#pragma vector = USCIAB0TX_VECTOR
__interrupt void USCI0TX_ISR(void)
{
    IFG2 &= ~UCA0TXIFG;                                               // Clear TX flag
}

//RX Interrupt///////////////////////////////////////////////////////
#pragma vector=USCIAB0RX_VECTOR
__interrupt void USCI0RX_ISR(void)
{
    if(UCA0RXBUF == 'A' )                                            //if the "A" character is received"
    {
        Boolean_Begin_Scanning = 1;
    }
    if(UCA0RXBUF == 'B' )                                            //if the "B" character is received"
    {
        Boolean_Stop_Scanning = 1;
    }
    if(UCA0RXBUF == 'a')                                             //if the "a" character is received"
    {
        Boolean_Begin_Path_Follower = 1;
    }
    if(UCA0RXBUF == 'b')                                             //if the "b" character is received"
    {
        Boolean_Stop_Path_Follower = 1;
    }
  IFG2 &= ~UCA0RXIFG;                                                //clear RX flag
}

//TA1.0 Timer Interrupt/////////////////////////////////////////////
#pragma vector=TIMER1_A0_VECTOR
__interrupt void Timer_A (void)
{
  Miliseconds++;                                                     //increment miliseconds
}
//End of Program/////////////////////////////////////////////////////
